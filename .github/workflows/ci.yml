name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Create virtual environment
        run: uv venv --python ${{ matrix.python-version }}

      # SDK is checked into repo and loaded via sys.path in sdk_imports.py
      # No installation needed!

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"

      - name: Run ruff linter
        run: |
          uv run ruff check .

      - name: Run ruff formatter check
        run: |
          uv run ruff format --check .

      - name: Run unit tests with pytest
        continue-on-error: true
        run: |
          # No unit tests currently (only integration tests)
          echo "Skipping unit tests - only integration tests exist"

      - name: Run integration tests (if secrets available)
        if: env.BUILDIUM_CLIENT_ID != ''
        env:
          BUILDIUM_BASE_URL: ${{ secrets.BUILDIUM_BASE_URL || 'https://api.buildium.com' }}
          BUILDIUM_CLIENT_ID: ${{ secrets.BUILDIUM_CLIENT_ID }}
          BUILDIUM_CLIENT_SECRET: ${{ secrets.BUILDIUM_CLIENT_SECRET }}
        run: |
          uv run pytest tests/test_integration.py -v

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' && (success() || failure())
        continue-on-error: true
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Create virtual environment
        run: uv venv --python 3.11

      - name: Build package
        run: |
          uv pip install build
          uv run python -m build

      - name: Check package
        run: |
          uv pip install twine
          uv run twine check dist/*

